@page "/ratings/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]


<h3 class="card-title">Ratings</h3>

<a href="/ratings/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Rating
</a>
<br />
<br />

@if (Ratings == null)
{
    <div class="alert alert-info">Loading Ratings...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Feedback</th>
                <th>Review</th>
                <th>Comment</th>
                <th>Booking ID</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var rating in Ratings)
            {
            <tr>
                <td>@rating.Feedback</td>
                <td>@rating.Review</td>
                <td>@rating.Comment</td>
                <td>@rating.Booking.Id</td>
                @*<td>@rating.Booking.Driver.DriverName</td>
        <td>@rating.Booking.DateCreated.Date.ToString("dd MMMM yyyy")</td>*@
                <td>
                    <a href="/ratings/view/@rating.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/ratings/edit/@rating.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(rating.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
                    }
                </tbody>
            </table>
        }

        @code {
            //Booking booking = new Booking();
            //private List<Passenger> Passengers;
            private List<Rating> Ratings;
            //private List<Booking> Bookings;

            protected async override Task OnInitializedAsync()
            {
                Ratings = await _client.GetFromJsonAsync<List<Rating>>($"{Endpoints.RatingsEndpoint}");
                //booking = await _client.GetFromJsonAsync<Booking>($"{Endpoints.BookingsEndpoint}");

            }

            async Task Delete(int ratingId)
            {
                var rating = Ratings.First(q => q.Id == ratingId);
                var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {rating.Review}?");
                if (confirm)

                {
                    await _client.DeleteAsync($"{Endpoints.RatingsEndpoint}/{ratingId}");
                    await OnInitializedAsync();
                }
            }

        }
