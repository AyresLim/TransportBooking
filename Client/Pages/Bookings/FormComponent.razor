@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>Booking Date: </label>
            <div>
                <InputDate @bind-Value="@booking.BookingDate" class="form-control" />
                <ValidationMessage For="@(() => booking.BookingDate)" />
            </div>
        </div>
        <div class=" form-group">
            <label>Booking Time: </label>
            <div>
                <InputText @bind-Value="@booking.BookingTime" class="form-control" />
                <ValidationMessage For="@(() => booking.BookingTime)" />
            </div>
        </div>
        <div class=" form-group">
            <label>Booking Payment: </label>
            <div>
                <InputNumber @bind-Value="@booking.BookingPayment" class="form-control" />
                <ValidationMessage For="@(() => booking.BookingPayment)" />
            </div>
        </div>
        <div class=" form-group">
            <label>Booking Location: </label>
            <div>
                <InputText @bind-Value="@booking.BookingLocation" class="form-control" />
                <ValidationMessage For="@(() => booking.BookingLocation)" />
            </div>
        </div>
        <div class="form-group">
            <label>Staff: </label>
            <div>
                <InputSelect @bind-Value="booking.StaffID" class="form-control">
                    <option value="">-- Select Staff --</option>
                    @if (Staffs != null)
                    {
                        foreach (var staff in Staffs)
                        {
                            <option value="@staff.Id">
                                @staff.StaffName - @staff.StaffAddress - @staff.StaffContact
                            </option>}
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.StaffID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Passenger: </label>
            <div>
                <InputSelect @bind-Value="booking.PassengerID" class="form-control">
                    <option value="">-- Select Passenger --</option>
                    @if (Passengers != null)
                    {
                        foreach (var passenger in Passengers)
                        {
                            <option value="@passenger.Id">
                                @passenger.PassengerName - @passenger.PassengerContact
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.PassengerID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Driver: </label>
            <div>
                <InputSelect @bind-Value="booking.DriverID" class="form-control">
                    <option value="">-- Select Driver --</option>
                    @if (Drivers != null)
                    {
                        foreach (var driver in Drivers)
                        {
                            <option value="@driver.Id">
                                @driver.DriverName - @driver.DriverLicense
                            </option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => booking.DriverID)" />
            </div>
        </div>

    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="passengers" />
</EditForm>

@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff> Staffs;
    private IList<Passenger> Passengers;
    private IList<Driver> Drivers;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Passengers = await _client.GetFromJsonAsync<List<Passenger>>($"{Endpoints.PassengersEndpoint}");
        Drivers = await _client.GetFromJsonAsync<List<Driver>>($"{Endpoints.DriversEndpoint}");
    }
}
